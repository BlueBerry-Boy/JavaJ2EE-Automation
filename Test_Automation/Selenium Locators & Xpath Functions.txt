Selenium has 4 components. They are as follows:


a. RC - Outdated(Remote Control Server)
b. IDE-Integrated dev environment mainly used for record and playback on FF browser
c. WebDriver
d. Grid

WebDriver - 2 weeks
Testng   - 1week
Live Project - 2 days
Grid - 1 day


webDriver:
-----------
WebDriver is an automation tool useful to perform Cross Browser Testing.
Verifying the AUT(appl under test) against multiple browsers.
Limitation / Drawback -->WebDriver doesnt help us in automating Desktop based application. notepad.exe

Selenium WebDriver API (Application Programming Interface)
------------------------------------------------------------

API Contains classes,methods,interfaces. All these are bundled and provided to us in jar file format.

A jar file named selenium-java.2.44.zip downloaded and added the selenium-java.2.44.jar to the build path of the project.
Apart from that we have to add the jars available under lib directory also which are required for execution.

Selenium API ->http://selenium.googlecode.com/git/docs/api/java/index.html

Package ->org.openqa.selenium

Compatibility-> the selenium-java-2.46.jar should be compatible with latest version of ff 38.0


TC_001:Verifying the title of page
------------------------------------
1. Open FF.
2. Enter the url http://www.google.com
3. Check the title

Expected Result:
-------------
"Google"

Actual Result:
----------------
"Google is displayed"

Result:
----------
Pass


FirefoxDriver is a class implementing an WebDriver interface.

 WebDriver driver = new FirefoxDriver(); //Open FF

1. In Firefox we have to download the plugins

     Firebug->https://addons.mozilla.org/en-US/firefox/addon/firebug/

     Firepath->https://addons.mozilla.org/en-us/firefox/addon/firepath/

     <input id="username" class="textboxcolor" type="text" name="username">


    Properties/Attributes for Username textbox are -> id,class,type,name
    TagName-> input



    ---->Identification and Action

         Identify -> using properties

        Action ->    sendKeys()- textbox
                     click() - hyperlink,radio,checkbox,listbox,button



	WebElement e = driver.findElement(By.id("username"));//Identify
        e.sendKeys("H2kinfosys");//Action
             
Identification of Objects/WebElements/HTML Components can be done in 8 ways: (or) Locators:
------------------------
1. id - driver.findElement(By.id("usernmae"))- done

2. name- driver.findElement(By.name("username"));
      driver.findElement(By.name("password")); - done


3. className-Done
          class="textboxcolor"  driver.findElement(By.className("textboxcolor"));
          class="inputtext _58mg _5dba _2ph-"  //driver.findElement(By.className("inputtext _58mg _5dba _2ph-"));  InvalidSelectorException:Compound class names not supported.
 

4. tagName-Done

	tagName="input"
	
	driver.findElement(By.tagName("input"));//Select the username

5. linkText(hyperlink)- done

	WebElement e =driver.findElement(By.linkText("Sign In"))
        e.click();

6. partialLinkText(hyperlink) for dynamic links where the text is keep on changing. So we use the static part.
	WebElement e =driver.findElement(By.linkText("Sign"))
        e.click();
		
	WebElement e =driver.findElement(By.linkText("In"))
        e.click();- Done

7. xpath-> html path -

   xpath - > xml path
             hmtl path

8. cssSelector


Difference between close() and quit()
----------------------------------------
driver.close()-> closes the browser which has focus Ex:LoginPage.html
driver.quit()->closes all the browser opened by webdriver Ex: LoginPage,Singin

--------------------------------------------------------------------------
 
7. xpath-> html path -

   xpath - > xml path
             hmtl path


html
+------body
         +------ table
                  +----------tbody
                              +------tr[1]
                                      +-----------td[1]
                                                   +------------sudheer.
/html/body/table/tbody/tr[1]/td[1]/sudheer


	
table			
				
tr[1]	td	td	td	
tr[2]	td	td	td(sudheer)	/html/body/table/tr[2]/td[3]
tr[3]	td	td	td	
tr	td	td	td	
tr	td	td	td	/html/body/table/tr[5]/td[1]




Absolute Xpath->        Starts from root node called 'html' tag. It always starts with single backward slash.

			/html/body/table/tbody/tr[1]/td[2]/input
			/html/body/table/tbody/tr[1]/td[2]/input


Relative Xpath ->       Starts from any where in the path. It has two backward slashes.

                       //body/table/tbody/tr[1]/td[2]/input
			//table/tbody/tr[1]/td[2]/input
			//table[@name='cart']/tbody/tr[1]/td[2]/input
			//tbody/tr[1]/td[2]/input
			//tr[@id='item1']/td[2]/input
			//input[@id='username']
			//input[@class='textboxcolor']
			//*[@id='username']   (* means any thing)
			 
			id('username')(only for id)

			/html//table(subchild)

			/hmtl/body (direct child)

			//input[@id] [Identify the input element which are having ID attribute]





Attribute Selector
--------------------
//tagName[@attrname='attrvalue']
Ex: //table[@name='cart']
//table[@border='1']


ID Selector:(only for ID)
-------------------
attributename('attrvalue')

id('username')

()-paranthesis


Xpath Indexing:
------------------------
Type 1 : //input[@name='chk'][2]
Index starts from one.

Type 2: Apply Paranthesis

(//span[@class='mtl _3ma _6p _6s _6v'])[2]



Suppose in a webpage in which i have multiple checkboxes which are having same name.

<input tye="checkbox" name="chk">
<input tye="checkbox" name="chk">
<input tye="checkbox" name="chk">
<input tye="checkbox" name="chk">

Ex: MultipleCheckbox.html


//input[@name='chk'] It will select all the check boxes. We have to apply indexing.



 driver.findElement(By.xpath("//input[@name='chk']")).click();
 



Xpath Text Function:
----------------------
//span[text()=" Share what's new "]  //Exact Text



//span[contains(text(),'Share')]     //Part of Text or Substring of Text



WebElement e = driver.findElement(By.xpath('//span[contains(text(),'Share')]'));
String actual= e.getText();
String expected='';

if(actual.equals(expected))
{

    syso(Its working as expected);

}


Handling Dynamic Elements in xpath:
----------------------------------------
<input id="text-34567">

//input[@id='text-34567']

//input[starts-with(@id,'text-')]
//input[starts-with(@id,'pass')]


Xpath -text(),contains(),starts-with()



//Reading the value from the exel
String str = sheet.getCell(col,row).getContents();

driver.findElement(By.xpath("")).sendKeys(str);



Xpath Axes Locators:
-----------------------

http://www.deal4loans.com/home-loans.php

Click on apply button in the first row
----------------------------------------
//span[text()='State Bank of India (SBI)']/ancestor::td/following-sibling::td[3]
//span[text()='State Bank of India (SBI)']/ancestor::td/following-sibling::td[3]


Retreving the text 
---------------------
//img[@src='images/home-loan-apply-new-btn-new.png']/ancestor::td/preceding-sibling::td[3]/span[text()='State Bank of India (SBI)']

ancestor- select parent or grand parent
following-sibling- Which follows
preceiding-sibling - Which precedes


WebElement e = driver.findElement(By.xpath("//img[@src='images/home-loan-apply-new-btn-new.png']/ancestor::td/preceding-sibling::td[3]/span[text()='State Bank of India (SBI)']"));

syso(e.getText());

Direct Child and SubChild:
---------------------------
                   /html/body in xpath -       body is direct child of html
		   /html/body/table in xpath - table is subchild of html
                   /html//table              - for subchild we have to use //



8. Css Selector:
-------------------

Css Stands for cascading style sheets.

they are two different css paths.


1. Absolute CSS:

                    /html/body/table/tbody/tr[1]/td[2]/input


                   /html/body in xpath -       body is direct child of html
		   /html/body/table in xpath - table is subchild of html
                   /html//table              - for subchild we have to use //


                   /html/body/table/tbody/tr[1]/td[2]/input
                    html>body>table>tbody>tr[1]>td[2]>input -  No complete CSS
                    final css:
                    html>body>table>tbody>tr:nth-of-type(1)>td:nth-of-type(2)>input 
                      > - means direct child
      

2. Relative

			body>table>tbody>tr:nth-of-type(1)>td:nth-of-type(2)>input
			table>tbody>tr:nth-of-type(1)>td:nth-of-type(2)>input
			table[name='cart']>tbody>tr:nth-of-type(1)>td:nth-of-type(2)>input
			tbody>tr:nth-of-type(1)>td:nth-of-type(2)>input
			tr:nth-of-type(1)>td:nth-of-type(2)>input
			tr[id='item1']>td:nth-of-type(2)>input
			tr#item1>td:nth-of-type(2)>input
			#item1>td:nth-of-type(2)>input
			input[id='username']	
			input#username
			#username




Attribute Selector in CSS:
------------------------
tagName[attrname = 'attrvalue']

Example: table[name='cart']


ID Selector :
--------------- 
tagName#idvalue
#idvalue

Example:
tr#item1
#item1

Class Selector:
-----------------

<input type="textbox" class="textboxcolor">

<input type="textbox" class="a b  c d">-Compound Classes

WebElement e = driver.findElement(By.className("textboxcolor"));


.textboxcolor -  driver.findElement(By.cssSelector(".textboxcolor"));

.a.b.c.d-  driver.findElement(By.cssSelector(".a.b.c.d"));



Syntax: .classname
-----------------------------------------------------------------------------------------------------------------------

Select is a class in webdriver useful for retrieving the elements from the dropdown.

Select select = new Select(WebElement);



-----------------------------------------------------------------------------------------------------------------------

findElement:
-----------
findElement returns an WebElement
                      WebElement e =     driver.findElement(By.id("username"));


findElement selects the first matching element which are having same attribute values.
findElement throws NoSuchElementException if it is unable to identify the Element.
NoSuchEelementException is an Run Time Exception. ( org.openqa.selenium.NoSuchElementException: Unable to locate element: {"method":"id","selector":"passs word"})



 <input type="text" id="username">
 <input type="text" id="username">
 <input type="text" id="username">

findElements:
----------------

		List<WebElement>  e =     driver.findElements(By.id("username"));
		syso(e.size()); ->3

1. findElements returns an list of weblements.
2. findElements selects all the matching elements which are having same attributes.
3. findElements returns an empty list if it is unable to identfity the elements.














getTitle()


gettitle()//wrong

getcurrenturl() //wrong

Coding Conventions: 
1.Methods the first word lowercase,from secondword the first letter is uppercase it is called CamelCase.
2. Classes and Interfaces the first letter in each word is uppercase.

getTitle
getCurrentUrl

class FirefoxDriver

Interface WebDriver 




sudheer.h2kinfosys@gmail.com




html: hyper text mark up language contains pre-defined tags

Structure of html:

			<html>
				<head>
					<title> </tile>
				</head>
				<body>

					<table>

						<input
					</table>
				</body>
		 	</html>


html has the immediate child which is head and body
html has the sub child(descendents) which is title and table

html is the root.


/html/head/title

/html/body/table/input-







FF - Firebug & Firepath
Chrome-> Firebug
IE->Developer tools To open developer tools in IE-> F12









Username <input type="text">  index 1  //input[1]
Password <input type="password"> index 2 //input[2]
<input type="button">index 3             //input[3]












 










